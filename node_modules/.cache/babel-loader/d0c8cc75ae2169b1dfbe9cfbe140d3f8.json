{"ast":null,"code":"import _classCallCheck from \"C:/Users/EMRE CAN/FSWeb-S6-Challenge/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/EMRE CAN/FSWeb-S6-Challenge/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/EMRE CAN/FSWeb-S6-Challenge/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/EMRE CAN/FSWeb-S6-Challenge/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { R as RequestHandler, f as cleanUrl, h as getSearchParams, d as devUtils, m as matchRequestUrl, g as getPublicUrlFromRequest, i as prepareRequest, j as prepareResponse, k as getStatusCodeColor, l as getTimestamp } from './RequestHandler-deps.js';\nimport { b as set, s as status, d as cookie, g as json, e as delay, f as fetch } from './fetch-deps.js';\nimport { b as body, t as text, x as xml } from './xml-deps.js';\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\n\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\nvar RESTMethods;\n\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\n\nvar restContext = {\n  set: set,\n  status: status,\n  cookie: cookie,\n  body: body,\n  text: text,\n  json: json,\n  xml: xml,\n  delay: delay,\n  fetch: fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\n\nvar RestHandler = /*#__PURE__*/function (_RequestHandler) {\n  _inherits(RestHandler, _RequestHandler);\n\n  var _super = _createSuper(RestHandler);\n\n  function RestHandler(method, path, resolver) {\n    var _this;\n\n    _classCallCheck(this, RestHandler);\n\n    _this = _super.call(this, {\n      info: {\n        header: \"\".concat(method, \" \").concat(path),\n        path: path,\n        method: method\n      },\n      ctx: restContext,\n      resolver: resolver\n    });\n\n    _this.checkRedundantQueryParameters();\n\n    return _this;\n  }\n\n  _createClass(RestHandler, [{\n    key: \"checkRedundantQueryParameters\",\n    value: function checkRedundantQueryParameters() {\n      var _this$info = this.info,\n          method = _this$info.method,\n          path = _this$info.path;\n\n      if (path instanceof RegExp) {\n        return;\n      }\n\n      var url = cleanUrl(path); // Bypass request handler URLs that have no redundant characters.\n\n      if (url === path) {\n        return;\n      }\n\n      var searchParams = getSearchParams(path);\n      searchParams.forEach(function (_, paramName) {});\n      devUtils.warn(\"Found a redundant usage of query parameters in the request handler URL for \\\"\".concat(method, \" \").concat(path, \"\\\". Please match against a path instead and access query parameters in the response resolver function using \\\"req.url.searchParams\\\".\"));\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(request, resolutionContext) {\n      return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);\n    }\n  }, {\n    key: \"getPublicRequest\",\n    value: function getPublicRequest(request, parsedResult) {\n      return Object.assign(Object.assign({}, request), {\n        params: parsedResult.params || {}\n      });\n    }\n  }, {\n    key: \"predicate\",\n    value: function predicate(request, parsedResult) {\n      var matchesMethod = this.info.method instanceof RegExp ? this.info.method.test(request.method) : isStringEqual(this.info.method, request.method);\n      return matchesMethod && parsedResult.matches;\n    }\n  }, {\n    key: \"log\",\n    value: function log(request, response) {\n      var publicUrl = getPublicUrlFromRequest(request);\n      var loggedRequest = prepareRequest(request);\n      var loggedResponse = prepareResponse(response);\n      var statusColor = getStatusCodeColor(response.status);\n      console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, \"color:\".concat(statusColor), \"\".concat(response.status, \" \").concat(response.statusText), 'color:inherit');\n      console.log('Request', loggedRequest);\n      console.log('Handler:', {\n        mask: this.info.path,\n        resolver: this.resolver\n      });\n      console.log('Response', loggedResponse);\n      console.groupEnd();\n    }\n  }]);\n\n  return RestHandler;\n}(RequestHandler);\n\nfunction createRestHandler(method) {\n  return function (path, resolver) {\n    return new RestHandler(method, path, resolver);\n  };\n}\n\nvar rest = {\n  all: createRestHandler(/.+/),\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"sources":["C:/Users/EMRE CAN/FSWeb-S6-Challenge/node_modules/msw/lib/esm/rest-deps.js"],"names":["R","RequestHandler","f","cleanUrl","h","getSearchParams","d","devUtils","m","matchRequestUrl","g","getPublicUrlFromRequest","i","prepareRequest","j","prepareResponse","k","getStatusCodeColor","l","getTimestamp","b","set","s","status","cookie","json","e","delay","fetch","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","method","path","resolver","info","header","ctx","checkRedundantQueryParameters","RegExp","url","searchParams","forEach","_","paramName","warn","request","resolutionContext","baseUrl","parsedResult","Object","assign","params","matchesMethod","test","matches","response","publicUrl","loggedRequest","loggedResponse","statusColor","console","groupCollapsed","formatMessage","statusText","log","mask","groupEnd","createRestHandler","rest","all","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"mappings":"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","sourcesContent":["import { R as RequestHandler, f as cleanUrl, h as getSearchParams, d as devUtils, m as matchRequestUrl, g as getPublicUrlFromRequest, i as prepareRequest, j as prepareResponse, k as getStatusCodeColor, l as getTimestamp } from './RequestHandler-deps.js';\nimport { b as set, s as status, d as cookie, g as json, e as delay, f as fetch } from './fetch-deps.js';\nimport { b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, path, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${path}`,\r\n                path,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, path } = this.info;\r\n        if (path instanceof RegExp) {\r\n            return;\r\n        }\r\n        const url = cleanUrl(path);\r\n        // Bypass request handler URLs that have no redundant characters.\r\n        if (url === path) {\r\n            return;\r\n        }\r\n        const searchParams = getSearchParams(path);\r\n        searchParams.forEach((_, paramName) => {\r\n        });\r\n        devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`);\r\n    }\r\n    parse(request, resolutionContext) {\r\n        return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        const matchesMethod = this.info.method instanceof RegExp\r\n            ? this.info.method.test(request.method)\r\n            : isStringEqual(this.info.method, request.method);\r\n        return matchesMethod && parsedResult.matches;\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        const statusColor = getStatusCodeColor(response.status);\r\n        console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.path,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (path, resolver) => {\r\n        return new RestHandler(method, path, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    all: createRestHandler(/.+/),\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"]},"metadata":{},"sourceType":"module"}